package streams

import (
	"github.com/rini-labs/go-stream"
)

// Of creates a Stream from a list of elements.
func Of[T any](elems ...T) stream.Stream[T] {
	return OfSlice(elems)
}

// OfSlice creates a Stream from a slice.
func OfSlice[T any](elems []T) stream.Stream[T] {
	var zeroValue T
	slice := elems
	return stream.NewStreamImpl[T](stream.NewIterator[T](func() (T, error) {
		if len(slice) <= 0 {
			return zeroValue, stream.Done
		}
		rv := slice[0]
		slice = slice[1:]
		return rv, nil
	}))
}

// Generate an infinite sequential stream where each element is generated by the provided supplier function.
// Due to the stateful nature of the supplier, multiple operations towards the same stream might provide
// different results.
func Generate[T any](supplier func() T) stream.Stream[T] {
	return stream.NewStreamImpl[T](stream.NewIterator[T](func() (T, error) {
		return supplier(), nil
	}))
}
